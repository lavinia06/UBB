use DressStudio3

DROP TABLE Tc
DROP TABLE Tb
DROP TABLE Ta

create table Ta(
	aid int PRIMARY KEY,
	a2 int UNIQUE,
	a3 int
)


create table Tb(
	bid int PRIMARY KEY,
	b2 int
)

create table Tc(
	cid int PRIMARY KEY,
	aid int FOREIGN KEY references Ta(aid),
	bid int FOREIGN KEY references Tb(bid)
)


-- Procedure to generate and insert random data into Ta

GO
CREATE or ALTER PROCEDURE insertIntoTa @rows INT AS
BEGIN
		DECLARE @max INT
		SET @max = @rows*2 + 100
		WHILE @rows > 0
		BEGIN
			INSERT INTO Ta VALUES(@rows, @max, @max%210)
			SET @rows = @rows - 1
			SET @max = @max - 2
	    END
END



SELECT * FROM Ta


GO
CREATE OR ALTER PROCEDURE insertIntoTb @rows INT AS
BEGIN
	WHILE @rows > 0
	BEGIN
	INSERT INTO Tb VALUES(@rows, @rows%232)
	SET @rows = @rows - 1
	END
END


SELECT * FROM Tb

GO
CREATE OR ALTER PROCEDURE insertIntoTc @rows INT AS
BEGIN
	DECLARE @aid INT
	DECLARE @bid INT 
	
	WHILE @rows > 0
	BEGIN
		SET @aid = (SELECT TOP 1 aid FROM Ta ORDER BY NEWID())
		SET @bid = (SELECT TOP 1 bid FROM Tb ORDER BY NEWID())
		INSERT INTO Tc VALUES (@rows, @aid, @bid)
		SET @rows = @rows - 1
	END
END

EXEC insertIntoTa 500
EXEC insertIntoTb 500
EXEC insertIntoTc 500
SELECT * FROM Tc


--a. Write queries on Ta such that their execution plans contain the following operators:

--clustered index scan - scan the entire table

SELECT *
FROM Ta

-- clustered index seek 
SELECT *
FROM Ta
WHERE aid < 152
--return a specific subset of rows from a clustered index


--nonclustered index scan;

SELECT a2
FROM Ta
ORDER BY a2

-- key lookup - nonclustered index seek + key lookup - the data is found in a nonclustered index, but additional data is needed
SELECT a3, a2
FROM Ta
WHERE a2 = 544

--b. Write a query on table Tb with a WHERE clause of the form WHERE b2 = value and analyze its execution plan. 
--Create a nonclustered index that can speed up the query. Examine the execution plan again.

SELECT *
FROM Tb
WHERE b2 = 154

-- Before creating a nonclustered index we have a clustered index scan with the cost: 0.0226431
DROP INDEX Tb_b2_index ON Tb
CREATE NONCLUSTERED INDEX Tb_b2_index ON Tb(b2)

--c.

GO
CREATE OR ALTER VIEW View1 AS
	SELECT A.aid, B.bid, C.cid
	FROM Tc C
	INNER JOIN Ta A ON A.aid = C.aid
	INNER JOIN Tb B ON B.bid = C.bid
	WHERE B.b2 > 0 AND A.a3 < 150

GO

if exists (select name from sys.indexes where name = 'index_nc_Tc_bid')
	drop index index_nc_Tc_bid on Tc

SELECT * FROM View1

create index index_nc_Tc_bid on Tc(bid)
SELECT * FROM View1

