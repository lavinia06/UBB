;Write a function that returns the sum of numeric atoms in a list, atany level.

(defun sun(l)
(cond
((numberp l) l)
((atom l) 0)
(t (apply '+(mapcar #'sun l)))
)
)

(print (sun '(1 2 3 4 4)))

;Write a function that returns the product of numeric atoms in a list,at any level.

(defun product(l)
(cond
((numberp l) l)
((atom l) 1)
(t(apply '* (mapcar #'product l)))
)
)

(print (product '(1 (2 8) 3)))


;Write a function that computes the sum of even numbers and the decrease the sum ofodd numbers, at any level of a list.

(defun findsign (a)
(cond
((= (mod a 2) 0) a)
(t (- a))
)
)

(defun f(l)
(cond
((numberp l) (findsign l))
((atom l) 0)
(t (apply '+ (mapcar #' f l)))
)
)

(print (f '(1 2 3 4 (5 6) 7 8)))



;Write a function that returns the maximum of numeric atoms in a list,at any level.

(defun mymax(a b)
(cond
((and (not (numberp a)) (not (numberp b)))nil)
((not (numberp a)) b)
((not (numberp b)) a)
((< a b) b)
(t a)
)
)

(defun maxlist(l)
(cond
((null l) nil)
(t(mymax (car l) (maxlist (cdr l))))
)
)

(defun fct(l)
(cond
((numberp l) l)
((atom l) 0)
(t (apply #'maxlist (list (mapcar #'fct l))))
)
)
(print (fct  '(2 3 (3 4 6) 9 (23 45))))


;Write a function that substitutes an elementE withall elements of alist L1 at alllevels of a given list L.

(defun f(l elem e)
    (cond
        ((and (atom l) (equal l elem)) e)
        ((and (atom l) (not (equal l elem))) l)
        (t (mapcar #' (lambda (l) (f l elem e)) l))
)
)
(print (f '(1 2 3 (3 3 4) 2 3 7) 3 '( 10 10 10)))


;Write a function to determine the number of nodes on the level k from a n-tree represented as follows: (rootlist_nodes_subtree1 ... list_nodes_subtreen) Eg: tree is(a (b (c)) (d) (e (f))) and k=1 => 3 nodes

(defun f(l n k)
(cond
((and (atom l) (=  k n)) 1)
( (atom l) 0)
(t (apply #'+ (mapcar #'(lambda (a)(f a (+ 1 n) k)) l)))
)
)

(print (f '(a (b (c)) (d) (e (f))) -1 1))



;Write a function that returns the number of atoms in a list, at anylevel.

(defun f(l)
(cond
((atom l) 1)
(t (apply #'+ (mapcar #' f l)))
)
)

(print (f '(1 3 5 2 4 (4 2 4) 92 )))

;Write a function that removes all occurrences of an atom from any level of a list.

(defun removea(l e)
(cond
((and (atom l) (= l e)) nil)
((and (atom l) (not(= l e))) (list l))
(t (list(mapcan #' (lambda(a)(removea a e)) l)))
)
)

(print (removea '(1 2 3 (5 6 3) 3 (4 ( 3 5))) 3))


;Write a function that substitutes an element through another one at alllevels of a given list.
(defun f(l e v)
(cond
((and (atom l) (equal l e)) v)
((and (atom l) (not(equal l e))) l)
(t (mapcar #' (lambda(a)(f a e v)) l))
)
)

(print (f '(1 4 3 ( 5 6 3) 7 3 ( 9 3)) 3 100))

;Define  a  function  that  replaces  one  node  with  another  one  in  a  n-treerepresented  as:  
;root list_of_nodes_subtree1... list_of_nodes_subtreen) Eg: tree is (a (b (c)) (d) (e (f))) ;
;andnode 'b' will be replace with node 'g' => tree (a (g (c)) (d) (e (f)))

(defun f(l a b)
(cond
((and (atom l) (equal a l)) b)
((and (atom l) (not(equal a l)))  l)
(t (mapcar #'(lambda (x) (f x a b)) l))
)
)




(print (f '(a (b (c)) (d) (e (f))) 'b 'g))


;Write a function that reversesa list together with all its sublists elements, at any level.

(defun myappend(l1 l2)
(cond
((null l1) l2)
(t (cons (car l1) (myappend (cdr l1) l2)))
)
)

(print (myappend '(1 3 5 )'( 2 4 1)))

(defun reversea(l)
    (cond
    ((null l) nil)
    (t (myappend (reversea (cdr l)) (list (car l))))
    )
)

(print (reversea '(6 2 4 2 9)))


(defun ff(l)
(cond
((atom l) l)
(t (apply #'reversea (list (mapcar #' ff l))))
)
)

(print (ff '( 1 2 4 (8 5 3) 7 2 4(2 2))))
