2 d----
(defun contains (l e)
(cond
((null l)nil)
((= e (car l))T)
(t (contains (cdr l) e))
)
)

(defun intersectionn(l1 l2)
(cond
(())
((null l1) nil)
((null l2) nil)
((contains l1 (car l2)) (cons (car l2) (intersectionn l1 (cdr l2))))
(t (intersectionn(cdr l2) l1))
)
)
(print (intersectionn '(1 2 3 4 777 6) '(2 3 4 55 10 6)))
----------a

(defun insert(l e pos i)
(cond
((null l) nil)
((= pos i) (cons (car l) (cons e (insert (cdr l) e ( * pos 2) (+ i 1)))))
( t (cons (car l) (insert (cdr l) e pos (+ i 1))))
)
)

(print (insert '(1 2 4 5 7) 100 2 1))


-----b

;b) Write a function to get from a given list the list of all atoms, on any
;level, but reverse order. Example:
;(((A B) C) (D E)) ==> (E D C B A)
; l1,,ln p1...pn
(defun myappend(l1 l2)
(cond
((null l1) l2)
(t (cons (car l1) (myappend (cdr l1) l2)))
)
)
;(print (myappend '(1 2 3 5) '(7 7 7 7)))
;(print (cons '(1 2 3 5) '(9 9 9 9)))

nu i gata

---c
;Write a function that returns the greatest common divisor of all numbers in a nonlinear list.
(defun igcd(a b)
    (cond
        ((= a b) a)
        ((< a b) (igcd a (- b a)))
        (t (igcd (- a b) b))
    )
)
(print (igcd 12 3 ))

(defun gcdList(l)
(cond
((null (cdr l)) (car l))
((listp (car l)) (igcd (gcdList(car l) (gcdList (cdr l)))))
(t (igcd (car l) (gcdList (cdr l))))
)
)

(print (gcdList '(10 20 30)))


-----d 
;nr occurences

;nr occurences

(defun nrOcc(l e cont)
(cond
((null l) cont)
((listp (car l)) (+ (nrOcc (car l) e 0) ( nrOcc (cdr l) e cont)))
((= (car l) e) (nrOcc (cdr l) e (+ cont 1)))
(t (nrOcc (cdr l) e cont)))
)


(print (nrOcc '(1 3 3 3 (3 4) 8 2 3) 3 0))

(print (nrOcc '(1 3 3 3 7 8 2 3) 3 0))
